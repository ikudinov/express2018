{"version":3,"sources":["assets/weather/iconClose.svg","assets/weather/iconCloseRound.svg","assets/weather/iconCloudyDay.svg","redux/selectors/ui.ts","redux/actions/ui.ts","components/WeatherApp.tsx","components/App.tsx","redux/router.ts","redux/reducers/ui.ts","redux/reducers/index.ts","constants/index.ts","redux/sagas/ui.ts","redux/sagas/index.ts","index.tsx","redux/configureStore.ts"],"names":["getWeather","createSelector","state","ui","weather","getCities","cities","getCity","city","getOpenSearch","openSearch","SET_OPEN_SEARCH","LOAD_WEATHER","LOAD_WEATHER_SUCCESS","LOAD_CITIES","LOAD_CITIES_SUCCESS","setOpenSearch","createAction","loadWeather","name","loadWeatherSuccess","loadCities","loadCitiesSuccess","WeatherApp","React","useState","search","setSearch","dispatch","useDispatch","useSelector","handleOpenSearch","className","onClick","src","iconCloudyDay","alt","temp","wind","classnames","width","height","iconClose","onChange","e","target","value","onKeyDown","key","placeholder","iconCloseRound","map","id","App","path","history","createBrowserHistory","reducers","payload","handleActions","rootReducer","combineReducers","router","connectRouter","HANDLER","TYPES","loadWeatherSaga","loadCitiesSaga","rootUiSaga","bridge","send","type","handler","response","tempC","windKph","put","console","error","message","all","takeEvery","rootSaga","fork","store","initialState","sagaMiddleware","createSagaMiddleware","routerMiddleware","createRouterMiddleware","createStore","composeWithDevTools","applyMiddleware","run","toPromise","catch","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fec630a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iconClose.42061dc9.svg\";","export default __webpack_public_path__ + \"static/media/iconCloseRound.33fd2b69.svg\";","export default __webpack_public_path__ + \"static/media/iconCloudyDay.1decc728.svg\";","import { createSelector } from 'reselect'\r\nimport { ApplicationState, GetWeatherSelectorResult, Weather } from '../../types'\r\n\r\n// Generic types order: <State, Selector1, Selector2, ..., CurrentSelector>\r\nexport const getWeather = createSelector<ApplicationState, Weather, GetWeatherSelectorResult>(\r\n  [(state: ApplicationState) => state.ui.weather],\r\n  weather => {\r\n    return {\r\n      ...weather,\r\n    }\r\n  }\r\n)\r\n\r\nexport const getCities = createSelector<ApplicationState, [], []>(\r\n  [(state: ApplicationState) => state.ui.cities],\r\n  cities => {\r\n    return cities\r\n  }\r\n)\r\n\r\nexport const getCity = createSelector<ApplicationState, string | null, string | null>(\r\n  [(state: ApplicationState) => state.ui.city],\r\n  city => {\r\n    return city\r\n  }\r\n)\r\n\r\nexport const getOpenSearch = createSelector<ApplicationState, boolean, boolean>(\r\n  [(state: ApplicationState) => state.ui.openSearch],\r\n  openSearch => {\r\n    return openSearch\r\n  }\r\n)\r\n","import { createAction } from 'redux-actions'\r\nimport { Weather } from '../../types'\r\n\r\nexport const SET_OPEN_SEARCH = 'SET_OPEN_SEARCH'\r\nexport const LOAD_WEATHER = 'LOAD_WEATHER'\r\nexport const LOAD_WEATHER_SUCCESS = 'LOAD_WEATHER_SUCCESS'\r\nexport const LOAD_CITIES = 'LOAD_CITIES'\r\nexport const LOAD_CITIES_SUCCESS = 'LOAD_CITIES_SUCCESS'\r\n\r\nexport const setOpenSearch = createAction(SET_OPEN_SEARCH, (openSearch: boolean) => (openSearch))\r\nexport const loadWeather = createAction(LOAD_WEATHER, (name: string) => (name))\r\nexport const loadWeatherSuccess = createAction(LOAD_WEATHER_SUCCESS, (weather: Weather) => weather)\r\nexport const loadCities = createAction(LOAD_CITIES, (city: string) => (city))\r\nexport const loadCitiesSuccess = createAction(LOAD_CITIES_SUCCESS, (cities: []) => cities)\r\n\r\nexport type setOpenSearchActionType = ReturnType<typeof setOpenSearch>\r\nexport type loadWeatherActionType = ReturnType<typeof loadWeather>\r\nexport type loadWeatherSuccessActionType = ReturnType<typeof loadWeatherSuccess>\r\nexport type loadCitiesActionType = ReturnType<typeof loadCities>\r\nexport type loadCitiesSuccessActionType = ReturnType<typeof loadCitiesSuccess>\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport classnames from 'classnames'\r\nimport '../styles/weather/all.scss'\r\nimport iconClose from '../assets/weather/iconClose.svg'\r\nimport iconCloseRound from '../assets/weather/iconCloseRound.svg'\r\nimport iconCloudyDay from '../assets/weather/iconCloudyDay.svg'\r\nimport { ApplicationState, GetWeatherSelectorResult, City } from '../types'\r\nimport { getWeather, getCities, getCity, getOpenSearch } from '../redux/selectors/ui'\r\nimport { loadCities, loadWeather, setOpenSearch } from '../redux/actions/ui'\r\n\r\nexport default function WeatherApp() {\r\n  const [search, setSearch] = React.useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const weather = useSelector<ApplicationState, GetWeatherSelectorResult>(getWeather)\r\n  const cities = useSelector<ApplicationState, City[]>(getCities)\r\n  const city = useSelector<ApplicationState, string | null>(getCity)\r\n  const openSearch = useSelector<ApplicationState, boolean>(getOpenSearch)\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n    if (e.key === 'Enter') {\r\n      dispatch(loadCities(search))\r\n    }\r\n  }\r\n\r\n  const handleClickCity = (name: string) => {\r\n    dispatch(loadWeather(name))\r\n    setSearch('')\r\n  }\r\n\r\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.value !== search) setSearch(e.target.value)\r\n  }\r\n\r\n  const handleOpenSearch = () => dispatch(setOpenSearch(!openSearch))\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app__header\">\r\n        <button\r\n          className=\"app__btn-menu app__btn-menu--dotted\"\r\n          onClick={handleOpenSearch}\r\n        >\r\n          <span className=\"sr-only\">Open menu</span>\r\n        </button>\r\n      </header>\r\n      <main className=\"app__main\">\r\n        <section className=\"weather\">\r\n          <img className=\"weather__icon\" src={iconCloudyDay} alt=\"\" />\r\n          <strong className=\"weather__title\">Cloudy</strong>\r\n          {city && (<>\r\n            <span className=\"weather__location\">{city}</span>\r\n\r\n            <div className=\"weather__info\">\r\n              <div className=\"weather-info\">\r\n                {weather.temp && (<div className=\"weather-info__item\">\r\n                  <strong className=\"weather-info__title\">{weather.temp}°</strong>\r\n                  <span className=\"weather-info__desc\">Feels like</span>\r\n                </div>)}\r\n                {weather.wind && (<div className=\"weather-info__item\">\r\n                  <strong className=\"weather-info__title\">{weather.wind} km/h</strong>\r\n                  <span className=\"weather-info__desc\">Wind speed</span>\r\n                </div>)}\r\n              </div>\r\n            </div>\r\n          </>)}\r\n        </section>\r\n      </main>\r\n      <aside className={classnames({\r\n        'app__aside': true,\r\n        'app__aside--show': openSearch,\r\n      })}>\r\n        <section className=\"weather-search\">\r\n          <header className=\"weather-search__header\">\r\n            <strong className=\"weather-search__title\">Choose city</strong>\r\n            <button\r\n              className=\"app__btn-menu weather-search__btn-close\"\r\n              onClick={handleOpenSearch}\r\n            >\r\n              <img width={18} height={18} src={iconClose} alt=\"close\" />\r\n            </button>\r\n          </header>\r\n          <div className=\"weather-search-input\">\r\n            <input onChange={handleSearchInputChange} onKeyDown={handleKeyDown} value={search} className=\"weather-search-input__field\" placeholder=\"Search\" />\r\n            <button onClick={() => setSearch('')} className=\"app__btn-menu weather-search-input__btn-clear\">\r\n              <img width={14} height={14} src={iconCloseRound} alt=\"close\" />\r\n            </button>\r\n          </div>\r\n          <ul className=\"weather-search-suggestion\">\r\n            {cities.map((city: City) => (\r\n              <li onClick={() => {\r\n                handleClickCity(city?.name)\r\n              }} key={city?.id} className=\"weather-search-suggestion__item\">{city?.name}</li>\r\n            ))}\r\n          </ul>\r\n        </section>\r\n      </aside>\r\n    </div>\r\n  )\r\n}","import React from \"react\"\r\nimport { Route, Switch } from \"react-router-dom\"\r\nimport WeatherApp from \"./WeatherApp\"\r\n\r\nexport default function App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\">\r\n        <WeatherApp />\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n","import { createBrowserHistory } from 'history'\r\n\r\n// Create history singleton\r\nconst history = createBrowserHistory()\r\n\r\nexport default history\r\n","import { handleActions } from 'redux-actions'\r\nimport { UiState } from '../../types'\r\nimport {\r\n  LOAD_WEATHER,\r\n  LOAD_WEATHER_SUCCESS,\r\n  loadWeatherSuccessActionType,\r\n  loadWeatherActionType,\r\n  loadCitiesSuccessActionType,\r\n  LOAD_CITIES_SUCCESS,\r\n  SET_OPEN_SEARCH,\r\n  setOpenSearchActionType,\r\n} from '../actions/ui'\r\n\r\nconst initialState: UiState = {\r\n  cities: [],\r\n  weather: {\r\n    temp: null,\r\n    wind: null,\r\n  },\r\n  city: null,\r\n  openSearch: false,\r\n}\r\n\r\nconst reducers = {\r\n  [LOAD_WEATHER]: (state: UiState, { payload: name }: loadWeatherActionType): UiState => {\r\n    return {\r\n      ...state, city: name, weather: {\r\n        temp: null,\r\n        wind: null,\r\n      },\r\n    }\r\n  },\r\n  [LOAD_WEATHER_SUCCESS]: (state: UiState, { payload: weather }: loadWeatherSuccessActionType): UiState => {\r\n    return { ...state, weather: { ...weather } }\r\n  },\r\n  [LOAD_CITIES_SUCCESS]: (state: UiState, { payload }: loadCitiesSuccessActionType): UiState => {\r\n    return { ...state, cities: payload }\r\n  },\r\n  [SET_OPEN_SEARCH]: (state: UiState, { payload }: setOpenSearchActionType): UiState => {\r\n    return { ...state, openSearch: payload }\r\n  },\r\n}\r\n\r\nexport const ui = handleActions<UiState, any>(reducers, initialState)\r\n","import { connectRouter } from 'connected-react-router'\r\nimport { combineReducers } from 'redux'\r\nimport history from '../router'\r\nimport { ui } from './ui'\r\nimport { ApplicationState } from '../../types'\r\n\r\nconst rootReducer = combineReducers<ApplicationState>({\r\n  ui,\r\n  router: connectRouter(history),\r\n})\r\n\r\nexport default rootReducer\r\n","export const HANDLER = {\r\n  BOTX: 'botx',\r\n  EXPRESS: 'express',\r\n}\r\nexport const TYPES = {\r\n  CURRENT_WEATHER: 'current_weather',\r\n  CITIES_AUTOCOMPLETE: 'cities_autocomplete',\r\n}","import { takeEvery, all, put } from 'redux-saga/effects'\r\nimport bridge from 'smartapp-bridge/build/main/index'\r\nimport { Weather } from '../../types'\r\nimport { HANDLER, TYPES } from '../../constants'\r\nimport { loadWeatherActionType, loadWeatherSuccess, LOAD_WEATHER, loadCitiesSuccess, loadCitiesActionType, LOAD_CITIES, setOpenSearch } from '../actions/ui'\r\n\r\nexport function* loadWeatherSaga({ payload }: loadWeatherActionType) {\r\n  try {\r\n    const response = yield bridge.send({\r\n      type: TYPES.CURRENT_WEATHER,\r\n      handler: HANDLER.BOTX,\r\n      payload,\r\n    })\r\n\r\n    const weather: Weather = {\r\n      temp: response?.payload?.weather?.tempC || null,\r\n      wind: response?.payload?.weather?.windKph || null,\r\n    }\r\n\r\n    yield put(loadWeatherSuccess(weather))\r\n    yield put(loadCitiesSuccess([]))\r\n    yield put(setOpenSearch(false))\r\n  } catch (e) {\r\n    console.error(`loadWeatherSaga error: ${e.message}`)\r\n  }\r\n}\r\n\r\nexport function* loadCitiesSaga({ payload }: loadCitiesActionType) {\r\n  try {\r\n    const response = yield bridge.send({\r\n      type: TYPES.CITIES_AUTOCOMPLETE,\r\n      handler: HANDLER.BOTX,\r\n      payload,\r\n    })\r\n\r\n    yield put(loadCitiesSuccess(response.payload.cities))\r\n  } catch (e) {\r\n    console.error(`loadCitiesSaga error: ${e.message}`)\r\n  }\r\n}\r\n\r\nexport function* rootUiSaga() {\r\n  yield all([takeEvery(LOAD_WEATHER, loadWeatherSaga)])\r\n  yield all([takeEvery(LOAD_CITIES, loadCitiesSaga)])\r\n}\r\n","import { all, fork } from 'redux-saga/effects'\r\nimport { rootUiSaga } from './ui'\r\n\r\nfunction* rootSaga() {\r\n  yield all([\r\n    fork(rootUiSaga),\r\n  ])\r\n}\r\n\r\nexport default rootSaga\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport './styles/index.scss'\r\nimport App from './components/App'\r\nimport { configureStore } from './redux/configureStore'\r\nimport history from './redux/router'\r\n\r\nconst store = configureStore()\r\n\r\nif (module.hot) module.hot.accept()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ConnectedRouter history={history}>\r\n        <App />\r\n      </ConnectedRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n","import { applyMiddleware, createStore, Store, AnyAction } from 'redux'\r\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootReducer from './reducers'\r\nimport rootSaga from './sagas'\r\nimport history from './router'\r\nimport { ApplicationState } from '../types'\r\n\r\nexport function configureStore(initialState?: ApplicationState): Store<ApplicationState> {\r\n  const sagaMiddleware = createSagaMiddleware()\r\n  const routerMiddleware = createRouterMiddleware(history)\r\n\r\n  // create store\r\n  const store: Store<ApplicationState> = createStore<ApplicationState, AnyAction, any, any>(\r\n    rootReducer,\r\n    initialState, // TODO: assign default value\r\n    composeWithDevTools(applyMiddleware(sagaMiddleware, routerMiddleware))\r\n  )\r\n\r\n  sagaMiddleware\r\n    .run(rootSaga)\r\n    .toPromise()\r\n    .catch((e: ExceptionInformation) => console.error('Saga error', e))\r\n\r\n  return store\r\n}\r\n"],"sourceRoot":""}