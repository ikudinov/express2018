{"version":3,"sources":["assets/weather/iconClose.svg","assets/weather/iconCloseRound.svg","assets/weather/iconCloudyDay.svg","assets/weather/iconRainyDay.svg","assets/weather/iconSnowfall.svg","assets/weather/iconSunny.svg","redux/selectors/weatherApp.ts","redux/actions/weatherApp.ts","redux/selectors/ui.ts","components/ui/top-loader/TopLoader.tsx","components/ui/main-loader/MainLoader.tsx","components/WeatherApp.tsx","components/App.tsx","redux/router.ts","redux/reducers/weatherApp.ts","redux/actions/ui.ts","redux/reducers/ui.ts","redux/reducers/index.ts","constants/index.ts","redux/sagas/weatherApp.ts","redux/sagas/index.ts","index.tsx","redux/configureStore.ts"],"names":["getWeather","createSelector","state","weatherApp","weather","getCities","cities","getCity","city","getOpenSearch","openSearch","SET_OPEN_SEARCH","LOAD_WEATHER","LOAD_WEATHER_SUCCESS","LOAD_CITIES","LOAD_CITIES_SUCCESS","LOAD_CITY_SUCCESS","LOAD_INITIAL_STATE","setOpenSearch","createAction","loadWeather","name","loadWeatherSuccess","loadCities","loadCitySuccess","loadCitiesSuccess","loadInitialState","getTopLoader","ui","topLoader","getMainLoader","mainLoader","TopLoader","useSelector","useState","start","setStart","stop","setStop","finish","setFinish","stopTimeout","useRef","finishTimeout","useEffect","current","setTimeout","clearTimeout","className","classnames","MainLoader","WeatherApp","React","search","setSearch","dispatch","useDispatch","handleSearchInputChange","debounce","e","text","target","value","length","includes","leading","handleOpenSearch","handleClearSearch","onClick","src","query","toLowerCase","iconSunny","iconRainyDay","iconSnowfall","iconCloudyDay","getIcon","alt","temp","wind","app__aside","width","height","iconClose","onChange","onKeyDown","key","placeholder","autoFocus","iconCloseRound","map","id","App","path","history","createBrowserHistory","reducers","payload","handleActions","SET_TOP_LOADER","SET_MAIN_LOADER","setTopLoader","setMainLoader","rootReducer","combineReducers","router","connectRouter","HANDLER","TYPES","loadWeatherSaga","loadCitiesSaga","loadInitialStateSaga","rootWeatherAppSaga","put","bridge","send","type","handler","response","tempC","windKph","condition","console","error","message","timeout","all","takeEvery","rootSaga","fork","store","initialState","sagaMiddleware","createSagaMiddleware","routerMiddleware","createRouterMiddleware","createStore","composeWithDevTools","applyMiddleware","run","toPromise","catch","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a6ba8fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iconClose.42061dc9.svg\";","export default __webpack_public_path__ + \"static/media/iconCloseRound.33fd2b69.svg\";","export default __webpack_public_path__ + \"static/media/iconCloudyDay.1decc728.svg\";","export default __webpack_public_path__ + \"static/media/iconRainyDay.9a648cdb.svg\";","export default __webpack_public_path__ + \"static/media/iconSnowfall.b3d5f1df.svg\";","export default __webpack_public_path__ + \"static/media/iconSunny.9f00bedd.svg\";","import { createSelector } from 'reselect'\r\nimport { ApplicationState, GetWeatherSelectorResult, Weather } from '../../types'\r\n\r\nexport const getWeather = createSelector<ApplicationState, Weather, GetWeatherSelectorResult>(\r\n  [(state: ApplicationState) => state.weatherApp.weather],\r\n  weather => {\r\n    return weather\r\n  }\r\n)\r\n\r\nexport const getCities = createSelector<ApplicationState, [], []>(\r\n  [(state: ApplicationState) => state.weatherApp.cities],\r\n  cities => {\r\n    return cities\r\n  }\r\n)\r\n\r\nexport const getCity = createSelector<ApplicationState, string | null, string | null>(\r\n  [(state: ApplicationState) => state.weatherApp.city],\r\n  city => {\r\n    return city\r\n  }\r\n)\r\n\r\nexport const getOpenSearch = createSelector<ApplicationState, boolean, boolean>(\r\n  [(state: ApplicationState) => state.weatherApp.openSearch],\r\n  openSearch => {\r\n    return openSearch\r\n  }\r\n)\r\n","import { createAction } from 'redux-actions'\r\nimport { Weather } from '../../types'\r\n\r\nexport const SET_OPEN_SEARCH = 'SET_OPEN_SEARCH'\r\nexport const LOAD_WEATHER = 'LOAD_WEATHER'\r\nexport const LOAD_WEATHER_SUCCESS = 'LOAD_WEATHER_SUCCESS'\r\nexport const LOAD_CITIES = 'LOAD_CITIES'\r\nexport const LOAD_CITIES_SUCCESS = 'LOAD_CITIES_SUCCESS'\r\nexport const LOAD_CITY_SUCCESS = 'LOAD_CITY_SUCCESS'\r\nexport const LOAD_INITIAL_STATE = 'LOAD_INITIAL_STATE'\r\n\r\nexport const setOpenSearch = createAction(SET_OPEN_SEARCH, (openSearch: boolean) => openSearch)\r\nexport const loadWeather = createAction(LOAD_WEATHER, (name: string) => name)\r\nexport const loadWeatherSuccess = createAction(LOAD_WEATHER_SUCCESS, (weather: Weather) => weather)\r\nexport const loadCities = createAction(LOAD_CITIES, (city: string) => city)\r\nexport const loadCitySuccess = createAction(LOAD_CITY_SUCCESS, (city: string) => city)\r\nexport const loadCitiesSuccess = createAction(LOAD_CITIES_SUCCESS, (cities: []) => cities)\r\nexport const loadInitialState = createAction(LOAD_INITIAL_STATE)\r\n\r\nexport type setOpenSearchActionType = ReturnType<typeof setOpenSearch>\r\nexport type loadWeatherActionType = ReturnType<typeof loadWeather>\r\nexport type loadWeatherSuccessActionType = ReturnType<typeof loadWeatherSuccess>\r\nexport type loadCitiesActionType = ReturnType<typeof loadCities>\r\nexport type loadCitiesSuccessActionType = ReturnType<typeof loadCitiesSuccess>\r\nexport type loadCitySuccessActionType = ReturnType<typeof loadCitySuccess>\r\nexport type loadInitialStateActionType = ReturnType<typeof loadInitialState>\r\n","import { createSelector } from 'reselect'\r\nimport { ApplicationState } from '../../types'\r\n\r\nexport const getTopLoader = createSelector<ApplicationState, boolean, boolean>(\r\n  [(state: ApplicationState) => state.ui.topLoader],\r\n  topLoader => topLoader\r\n)\r\n\r\nexport const getMainLoader = createSelector<ApplicationState, boolean, boolean>(\r\n  [(state: ApplicationState) => state.ui.mainLoader],\r\n  mainLoader => mainLoader\r\n)\r\n","import React, { useEffect, useState, useRef } from 'react'\r\nimport classnames from 'classnames'\r\nimport { useSelector } from 'react-redux'\r\nimport './TopLoader.scss'\r\nimport { getTopLoader } from '../../../redux/selectors/ui'\r\nimport { ApplicationState } from '../../../types/reducers'\r\n\r\nexport default function TopLoader() {\r\n  const topLoader = useSelector<ApplicationState, boolean>(getTopLoader)\r\n\r\n  const [start, setStart] = useState(false)\r\n  const [stop, setStop] = useState(false)\r\n  const [finish, setFinish] = useState(false)\r\n\r\n  const stopTimeout = useRef<NodeJS.Timeout | null>(null)\r\n  const finishTimeout = useRef<NodeJS.Timeout | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (topLoader && !start) {\r\n      setStart(true)\r\n    }\r\n\r\n    if (!topLoader && start) {\r\n      setStart(false)\r\n      setStop(true)\r\n\r\n      stopTimeout.current = setTimeout(() => {\r\n        setFinish(true)\r\n\r\n        finishTimeout.current = setTimeout(() => {\r\n          setStop(false)\r\n          setFinish(false)\r\n        }, 100)\r\n      }, 200)\r\n    }\r\n  }, [topLoader, start])\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (stopTimeout.current) clearTimeout(stopTimeout.current)\r\n      if (finishTimeout.current) clearTimeout(finishTimeout.current)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classnames({ 'top-loader': true, 'top-loader--enabled': start && !finish })}>\r\n      <div\r\n        className={classnames({\r\n          'top-loader__bar': true,\r\n          'top-loader__bar--start': start,\r\n          'top-loader__bar--stop': stop,\r\n          'top-loader__bar--finish': finish,\r\n        })}\r\n      ></div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './MainLoader.scss'\r\nimport { getMainLoader } from '../../../redux/selectors/ui'\r\nimport { ApplicationState } from '../../../types/reducers'\r\n\r\nexport default function MainLoader() {\r\n  const mainLoader = useSelector<ApplicationState, boolean>(getMainLoader)\r\n\r\n  if (!mainLoader) return null\r\n\r\n  return (\r\n    <div className=\"main-loader\">\r\n      <div className=\"main-loader__spinner\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport classnames from 'classnames'\r\nimport debounce from 'lodash/debounce'\r\nimport '../styles/weather/all.scss'\r\nimport iconClose from '../assets/weather/iconClose.svg'\r\nimport iconCloseRound from '../assets/weather/iconCloseRound.svg'\r\nimport iconCloudyDay from '../assets/weather/iconCloudyDay.svg'\r\nimport iconRainyDay from '../assets/weather/iconRainyDay.svg'\r\nimport iconSnowfall from '../assets/weather/iconSnowfall.svg'\r\nimport iconSunny from '../assets/weather/iconSunny.svg'\r\nimport { ApplicationState, GetWeatherSelectorResult, City } from '../types'\r\nimport { getWeather, getCities, getCity, getOpenSearch } from '../redux/selectors/weatherApp'\r\nimport {\r\n  loadCities,\r\n  loadWeather,\r\n  setOpenSearch,\r\n  loadCitiesSuccess,\r\n  loadInitialState,\r\n} from '../redux/actions/weatherApp'\r\nimport TopLoader from './ui/top-loader/TopLoader'\r\nimport MainLoader from './ui/main-loader/MainLoader'\r\n\r\nexport default function WeatherApp() {\r\n  const [search, setSearch] = React.useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(loadInitialState())\r\n  }, [dispatch])\r\n\r\n  const weather = useSelector<ApplicationState, GetWeatherSelectorResult>(getWeather)\r\n  const cities = useSelector<ApplicationState, City[]>(getCities)\r\n  const city = useSelector<ApplicationState, string | null>(getCity)\r\n  const openSearch = useSelector<ApplicationState, boolean>(getOpenSearch)\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n    if (e.key === 'Enter') {\r\n      dispatch(loadCities(search))\r\n    }\r\n  }\r\n\r\n  const handleClickCity = (name: string) => {\r\n    dispatch(loadWeather(name))\r\n    handleClearSearch()\r\n    handleOpenSearch()\r\n  }\r\n\r\n  const loadCitiesDebouncer = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const text = e.target.value\r\n\r\n    if (text.length >= 3 && !search.includes(text)) dispatch(loadCities(text))\r\n\r\n    setSearch(text)\r\n  }\r\n\r\n  const handleSearchInputChange = debounce(loadCitiesDebouncer, 1000, { leading: true })\r\n\r\n  const handleOpenSearch = () => {\r\n    if (!city && openSearch) return\r\n\r\n    if (!search.length) dispatch(loadCitiesSuccess([]))\r\n\r\n    dispatch(setOpenSearch(!openSearch))\r\n  }\r\n\r\n  const handleClearSearch = () => {\r\n    setSearch('')\r\n    dispatch(loadCitiesSuccess([]))\r\n  }\r\n\r\n  const getIcon = (text: string) => {\r\n    const query = text.toLowerCase()\r\n\r\n    switch (true) {\r\n      case query.includes('sun') || query.includes('clear'):\r\n        return iconSunny\r\n      case query.includes('rain'):\r\n        return iconRainyDay\r\n      case query.includes('snow') || query.includes('sleet'):\r\n        return iconSnowfall\r\n      default:\r\n        return iconCloudyDay\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <TopLoader />\r\n      <header className=\"app__header\">\r\n        <button className=\"app__btn-menu app__btn-menu--dotted\" onClick={handleOpenSearch}>\r\n          <span className=\"sr-only\">Open menu</span>\r\n        </button>\r\n      </header>\r\n      <main className=\"app__main\">\r\n        {city && weather && (\r\n          <section className=\"weather\">\r\n            <img className=\"weather__icon\" src={getIcon(weather.text)} alt=\"\" />\r\n            <strong className=\"weather__title\">{weather.text}</strong>\r\n            {city && (\r\n              <>\r\n                <span className=\"weather__location\">{city}</span>\r\n                <div className=\"weather__info\">\r\n                  <div className=\"weather-info\">\r\n                    {(\r\n                      <div className=\"weather-info__item\">\r\n                        <strong className=\"weather-info__title\">{weather.temp || 0}°</strong>\r\n                        <span className=\"weather-info__desc\">Feels like</span>\r\n                      </div>\r\n                    )}\r\n                    {weather.wind && (\r\n                      <div className=\"weather-info__item\">\r\n                        <strong className=\"weather-info__title\">{weather.wind} km/h</strong>\r\n                        <span className=\"weather-info__desc\">Wind speed</span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n          </section>\r\n        )}\r\n      </main>\r\n      <aside\r\n        className={classnames({\r\n          app__aside: true,\r\n          'app__aside--show': openSearch,\r\n        })}\r\n      >\r\n        <section className=\"weather-search\">\r\n          <header className=\"weather-search__header\">\r\n            <strong className=\"weather-search__title\">Choose city</strong>\r\n            <button className=\"app__btn-menu weather-search__btn-close\" onClick={handleOpenSearch}>\r\n              <img width={18} height={18} src={iconClose} alt=\"close\" />\r\n            </button>\r\n          </header>\r\n          <div className=\"weather-search-input\">\r\n            <input\r\n              onChange={handleSearchInputChange}\r\n              onKeyDown={handleKeyDown}\r\n              className=\"weather-search-input__field\"\r\n              placeholder=\"Search\"\r\n              autoFocus\r\n              value={search}\r\n            />\r\n            {!!search.length && (\r\n              <button onClick={handleClearSearch} className=\"app__btn-menu weather-search-input__btn-clear\">\r\n                <img width={14} height={14} src={iconCloseRound} alt=\"close\" />\r\n              </button>\r\n            )}\r\n          </div>\r\n          <ul className=\"weather-search-suggestion\">\r\n            {cities.map((city: City) => (\r\n              <li\r\n                onClick={() => {\r\n                  handleClickCity(city?.name)\r\n                }}\r\n                key={city?.id}\r\n                className=\"weather-search-suggestion__item\"\r\n              >\r\n                {city?.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </section>\r\n      </aside>\r\n      <MainLoader />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport WeatherApp from './WeatherApp'\r\n\r\nexport default function App() {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\">\r\n        <WeatherApp />\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n","import { createBrowserHistory } from 'history'\r\n\r\n// Create history singleton\r\nconst history = createBrowserHistory()\r\n\r\nexport default history\r\n","import { handleActions } from 'redux-actions'\r\nimport { WeatherAppState } from '../../types'\r\nimport {\r\n  LOAD_WEATHER,\r\n  LOAD_WEATHER_SUCCESS,\r\n  loadWeatherSuccessActionType,\r\n  loadWeatherActionType,\r\n  loadCitiesSuccessActionType,\r\n  LOAD_CITIES_SUCCESS,\r\n  SET_OPEN_SEARCH,\r\n  setOpenSearchActionType,\r\n  LOAD_CITY_SUCCESS,\r\n  loadCitySuccessActionType,\r\n} from '../actions/weatherApp'\r\n\r\nconst initialState: WeatherAppState = {\r\n  cities: [],\r\n  weather: {\r\n    temp: null,\r\n    wind: null,\r\n    text: '',\r\n  },\r\n  city: null,\r\n  openSearch: false,\r\n}\r\n\r\nconst reducers = {\r\n  [LOAD_WEATHER]: (state: WeatherAppState, { payload: name }: loadWeatherActionType): WeatherAppState => {\r\n    return {\r\n      ...state,\r\n      city: name,\r\n      weather: {\r\n        temp: null,\r\n        wind: null,\r\n        text: '',\r\n      },\r\n    }\r\n  },\r\n  [LOAD_WEATHER_SUCCESS]: (\r\n    state: WeatherAppState,\r\n    { payload: weather }: loadWeatherSuccessActionType\r\n  ): WeatherAppState => {\r\n    return { ...state, weather: { ...weather } }\r\n  },\r\n  [LOAD_CITIES_SUCCESS]: (state: WeatherAppState, { payload }: loadCitiesSuccessActionType): WeatherAppState => {\r\n    return { ...state, cities: payload }\r\n  },\r\n  [LOAD_CITY_SUCCESS]: (state: WeatherAppState, { payload }: loadCitySuccessActionType): WeatherAppState => {\r\n    return { ...state, city: payload }\r\n  },\r\n  [SET_OPEN_SEARCH]: (state: WeatherAppState, { payload }: setOpenSearchActionType): WeatherAppState => {\r\n    return { ...state, openSearch: payload }\r\n  },\r\n}\r\n\r\nexport const weatherApp = handleActions<WeatherAppState, any>(reducers, initialState)\r\n","import { createAction } from 'redux-actions'\r\n\r\nexport const SET_TOP_LOADER = 'SET_TOP_LOADER'\r\nexport const SET_MAIN_LOADER = 'SET_MAIN_LOADER'\r\n\r\nexport const setTopLoader = createAction(SET_TOP_LOADER, (topLoader: boolean) => topLoader)\r\nexport const setMainLoader = createAction(SET_MAIN_LOADER, (mainLoader: boolean) => mainLoader)\r\n\r\nexport type setTopLoaderActionType = ReturnType<typeof setTopLoader>\r\nexport type setMainLoaderActionType = ReturnType<typeof setMainLoader>\r\n","import { handleActions } from 'redux-actions'\r\nimport { UiState } from '../../types'\r\nimport { setMainLoaderActionType, setTopLoaderActionType, SET_MAIN_LOADER, SET_TOP_LOADER } from '../actions/ui'\r\n\r\nconst initialState: UiState = {\r\n  topLoader: false,\r\n  mainLoader: false,\r\n}\r\n\r\nconst reducers = {\r\n  [SET_TOP_LOADER]: (state: UiState, { payload: topLoader }: setTopLoaderActionType): UiState => {\r\n    return {\r\n      ...state,\r\n      topLoader,\r\n    }\r\n  },\r\n  [SET_MAIN_LOADER]: (state: UiState, { payload: mainLoader }: setMainLoaderActionType): UiState => {\r\n    return {\r\n      ...state,\r\n      mainLoader,\r\n    }\r\n  },\r\n}\r\n\r\nexport const ui = handleActions<UiState, any>(reducers, initialState)\r\n","import { connectRouter } from 'connected-react-router'\r\nimport { combineReducers } from 'redux'\r\nimport history from '../router'\r\nimport { weatherApp } from './weatherApp'\r\nimport { ui } from './ui'\r\nimport { ApplicationState } from '../../types'\r\n\r\nconst rootReducer = combineReducers<ApplicationState>({\r\n  weatherApp,\r\n  ui,\r\n  router: connectRouter(history),\r\n})\r\n\r\nexport default rootReducer\r\n","export const HANDLER = {\r\n  BOTX: 'botx',\r\n  EXPRESS: 'express',\r\n}\r\nexport const TYPES = {\r\n  CURRENT_WEATHER: 'current_weather',\r\n  CITIES_AUTOCOMPLETE: 'cities_autocomplete',\r\n  INITIAL_STATE: 'initial_state',\r\n}\r\n","import { takeEvery, all, put } from 'redux-saga/effects'\r\nimport bridge from 'smartapp-bridge/build/main/index'\r\nimport { Weather } from '../../types'\r\nimport { HANDLER, TYPES } from '../../constants'\r\nimport {\r\n  loadWeatherActionType,\r\n  loadWeatherSuccess,\r\n  LOAD_WEATHER,\r\n  loadCitiesSuccess,\r\n  loadCitiesActionType,\r\n  LOAD_CITIES,\r\n  setOpenSearch,\r\n  LOAD_INITIAL_STATE,\r\n  loadCitySuccess,\r\n} from '../actions/weatherApp'\r\nimport { setTopLoader, setMainLoader } from '../actions/ui'\r\n\r\nexport function* loadWeatherSaga({ payload }: loadWeatherActionType) {\r\n  try {\r\n    yield put(setMainLoader(true))\r\n\r\n    const response = yield bridge.send({\r\n      type: TYPES.CURRENT_WEATHER,\r\n      handler: HANDLER.BOTX,\r\n      payload: {\r\n        query: payload\r\n      },\r\n    })\r\n\r\n    const weather: Weather = {\r\n      temp: response?.payload?.weather?.tempC || null,\r\n      wind: response?.payload?.weather?.windKph || null,\r\n      text: response?.payload?.weather?.condition?.text || '',\r\n    }\r\n\r\n    yield put(loadWeatherSuccess(weather))\r\n    yield put(loadCitiesSuccess([]))\r\n    yield put(setOpenSearch(false))\r\n  } catch (e) {\r\n    console.error(`loadWeatherSaga error: ${e.message}`)\r\n  } finally {\r\n    yield put(setMainLoader(false))\r\n  }\r\n}\r\n\r\nexport function* loadCitiesSaga({ payload }: loadCitiesActionType) {\r\n  try {\r\n    yield put(setTopLoader(true))\r\n\r\n    const response = yield bridge.send({\r\n      type: TYPES.CITIES_AUTOCOMPLETE,\r\n      handler: HANDLER.BOTX,\r\n      payload: {\r\n        query: payload\r\n      },\r\n    })\r\n\r\n    yield put(loadCitiesSuccess(response.payload.cities))\r\n  } catch (e) {\r\n    console.error(`loadCitiesSaga error: ${e.message}`)\r\n  } finally {\r\n    yield put(setTopLoader(false))\r\n  }\r\n}\r\n\r\nexport function* loadInitialStateSaga() {\r\n  try {\r\n    yield put(setMainLoader(true))\r\n\r\n    const response = yield bridge.send({\r\n      type: TYPES.INITIAL_STATE,\r\n      handler: HANDLER.BOTX,\r\n      timeout: 3000,\r\n    })\r\n\r\n    if (!response.payload.city) {\r\n      yield put(setOpenSearch(true))\r\n      return\r\n    }\r\n\r\n    const weather: Weather = {\r\n      temp: response.payload.weather.tempC || null,\r\n      wind: response.payload.weather.windKph || null,\r\n      text: response.payload.weather.condition.text || '',\r\n    }\r\n\r\n    yield put(loadCitySuccess(response.payload.city))\r\n    yield put(loadWeatherSuccess(weather))\r\n  } catch (e) {\r\n    console.error('loadInitialStateSaga error: ', e)\r\n    yield put(setOpenSearch(true))\r\n  } finally {\r\n    yield put(setMainLoader(false))\r\n  }\r\n}\r\n\r\nexport function* rootWeatherAppSaga() {\r\n  yield all([\r\n    takeEvery(LOAD_WEATHER, loadWeatherSaga),\r\n    takeEvery(LOAD_CITIES, loadCitiesSaga),\r\n    takeEvery(LOAD_INITIAL_STATE, loadInitialStateSaga),\r\n  ])\r\n}\r\n","import { all, fork } from 'redux-saga/effects'\r\nimport { rootWeatherAppSaga } from './weatherApp'\r\n\r\nfunction* rootSaga() {\r\n  yield all([\r\n    fork(rootWeatherAppSaga),\r\n  ])\r\n}\r\n\r\nexport default rootSaga\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport './styles/index.scss'\r\nimport App from './components/App'\r\nimport { configureStore } from './redux/configureStore'\r\nimport history from './redux/router'\r\n\r\nconst store = configureStore()\r\n\r\nif (module.hot) module.hot.accept()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ConnectedRouter history={history}>\r\n        <App />\r\n      </ConnectedRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n","import { applyMiddleware, createStore, Store, AnyAction } from 'redux'\r\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootReducer from './reducers'\r\nimport rootSaga from './sagas'\r\nimport history from './router'\r\nimport { ApplicationState } from '../types'\r\n\r\nexport function configureStore(initialState?: ApplicationState): Store<ApplicationState> {\r\n  const sagaMiddleware = createSagaMiddleware()\r\n  const routerMiddleware = createRouterMiddleware(history)\r\n\r\n  // create store\r\n  const store: Store<ApplicationState> = createStore<ApplicationState, AnyAction, any, any>(\r\n    rootReducer,\r\n    initialState, // TODO: assign default value\r\n    composeWithDevTools(applyMiddleware(sagaMiddleware, routerMiddleware))\r\n  )\r\n\r\n  sagaMiddleware\r\n    .run(rootSaga)\r\n    .toPromise()\r\n    .catch((e: ExceptionInformation) => console.error('Saga error', e))\r\n\r\n  return store\r\n}\r\n"],"sourceRoot":""}