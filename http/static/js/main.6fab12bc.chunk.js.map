{"version":3,"sources":["assets/weather/iconClose.svg","assets/weather/iconCloseRound.svg","assets/weather/iconCloudyDay.svg","redux/selectors/ui.ts","redux/actions/ui.ts","components/WeatherApp.tsx","components/App.tsx","redux/router.ts","redux/reducers/ui.ts","redux/reducers/index.ts","constants/index.ts","redux/sagas/ui.ts","redux/sagas/index.ts","index.tsx","redux/configureStore.ts"],"names":["getWeather","createSelector","state","ui","weather","getCities","cities","getCity","city","getOpenSearch","openSearch","SET_OPEN_SEARCH","LOAD_WEATHER","LOAD_WEATHER_SUCCESS","LOAD_CITIES","LOAD_CITIES_SUCCESS","setOpenSearch","createAction","loadWeather","name","loadWeatherSuccess","loadCities","loadCitiesSuccess","WeatherApp","React","useState","search","setSearch","dispatch","useDispatch","useSelector","handleOpenSearch","className","onClick","src","iconCloudyDay","alt","temp","wind","classnames","width","height","iconClose","onChange","e","target","value","onKeyDown","key","placeholder","iconCloseRound","map","id","App","path","history","createBrowserHistory","reducers","payload","handleActions","rootReducer","combineReducers","router","connectRouter","HANDLER","TYPES","loadWeatherSaga","loadCitiesSaga","rootUiSaga","bridge","send","type","handler","response","tempC","windKph","put","console","error","message","all","takeEvery","rootSaga","fork","store","initialState","sagaMiddleware","createSagaMiddleware","routerMiddleware","createRouterMiddleware","createStore","composeWithDevTools","applyMiddleware","run","toPromise","catch","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAAe,G,MAAA,IAA0B,uCCA1B,MAA0B,2CCA1B,MAA0B,0C,eCI5BA,EAAaC,YACxB,CAAC,SAACC,GAAD,OAA6BA,EAAMC,GAAGC,WACvC,SAAAA,GACE,OAAO,eACFA,MAKIC,EAAYJ,YACvB,CAAC,SAACC,GAAD,OAA6BA,EAAMC,GAAGG,UACvC,SAAAA,GACE,OAAOA,KAIEC,EAAUN,YACrB,CAAC,SAACC,GAAD,OAA6BA,EAAMC,GAAGK,QACvC,SAAAA,GACE,OAAOA,KAIEC,EAAgBR,YAC3B,CAAC,SAACC,GAAD,OAA6BA,EAAMC,GAAGO,cACvC,SAAAA,GACE,OAAOA,K,QC3BEC,EAAkB,kBAClBC,EAAe,eACfC,EAAuB,uBACvBC,EAAc,cACdC,EAAsB,sBAEtBC,EAAgBC,YAAaN,GAAiB,SAACD,GAAD,OAA0BA,KACxEQ,EAAcD,YAAaL,GAAc,SAACO,GAAD,OAAmBA,KAC5DC,EAAqBH,YAAaJ,GAAsB,SAACT,GAAD,OAAsBA,KAC9EiB,EAAaJ,YAAaH,GAAa,SAACN,GAAD,OAAmBA,KAC1Dc,EAAoBL,YAAaF,GAAqB,SAACT,GAAD,OAAgBA,KCFpE,SAASiB,IAAc,IAAD,EACPC,IAAMC,SAAS,IADR,mBAC5BC,EAD4B,KACpBC,EADoB,KAG7BC,EAAWC,cAEXzB,EAAU0B,YAAwD9B,GAClEM,EAASwB,YAAsCzB,GAC/CG,EAAOsB,YAA6CvB,GACpDG,EAAaoB,YAAuCrB,GAiBpDsB,EAAmB,kBAAMH,EAASZ,GAAeN,KAEvD,OACE,sBAAKsB,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wBACEA,UAAU,sCACVC,QAASF,EAFX,SAIE,sBAAMC,UAAU,UAAhB,2BAGJ,sBAAMA,UAAU,YAAhB,SACE,0BAASA,UAAU,UAAnB,UACE,qBAAKA,UAAU,gBAAgBE,IAAKC,EAAeC,IAAI,KACvD,wBAAQJ,UAAU,iBAAlB,oBACCxB,GAAS,qCACR,sBAAMwB,UAAU,oBAAhB,SAAqCxB,IAErC,qBAAKwB,UAAU,gBAAf,SACE,sBAAKA,UAAU,eAAf,UACG5B,EAAQiC,MAAS,sBAAKL,UAAU,qBAAf,UAChB,yBAAQA,UAAU,sBAAlB,UAAyC5B,EAAQiC,KAAjD,UACA,sBAAML,UAAU,qBAAhB,2BAED5B,EAAQkC,MAAS,sBAAKN,UAAU,qBAAf,UAChB,yBAAQA,UAAU,sBAAlB,UAAyC5B,EAAQkC,KAAjD,WACA,sBAAMN,UAAU,qBAAhB,wCAOZ,uBAAOA,UAAWO,IAAW,CAC3B,YAAc,EACd,mBAAoB7B,IAFtB,SAIE,0BAASsB,UAAU,iBAAnB,UACE,yBAAQA,UAAU,yBAAlB,UACE,wBAAQA,UAAU,wBAAlB,yBACA,wBACEA,UAAU,0CACVC,QAASF,EAFX,SAIE,qBAAKS,MAAO,GAAIC,OAAQ,GAAIP,IAAKQ,EAAWN,IAAI,eAGpD,sBAAKJ,UAAU,uBAAf,UACE,uBAAOW,SArDe,SAACC,GAC3BA,EAAEC,OAAOC,QAAUpB,GAAQC,EAAUiB,EAAEC,OAAOC,QAoDAC,UAhE9B,SAACH,GACP,UAAVA,EAAEI,KACJpB,EAASP,EAAWK,KA8DsDoB,MAAOpB,EAAQM,UAAU,8BAA8BiB,YAAY,WACvI,wBAAQhB,QAAS,kBAAMN,EAAU,KAAKK,UAAU,gDAAhD,SACE,qBAAKQ,MAAO,GAAIC,OAAQ,GAAIP,IAAKgB,EAAgBd,IAAI,eAGzD,oBAAIJ,UAAU,4BAAd,SACG1B,EAAO6C,KAAI,SAAC3C,GAAD,OACV,oBAAIyB,QAAS,WAjED,IAACd,IAkEI,OAACX,QAAD,IAACA,OAAD,EAACA,EAAMW,KAjElCS,EAASV,EAAYC,IACrBQ,EAAU,KAiEkBK,UAAU,kCAF5B,gBAE+DxB,QAF/D,IAE+DA,OAF/D,EAE+DA,EAAMW,MAFrE,OAEQX,QAFR,IAEQA,OAFR,EAEQA,EAAM4C,iBC1Fb,SAASC,IACtB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAAC/B,EAAD,Q,8CCHOgC,EAFCC,c,gBCoBVC,GAAQ,mBACX7C,GAAe,SAACV,EAAD,GAAwE,IAA5CiB,EAA2C,EAApDuC,QACjC,OAAO,2BACFxD,GADL,IACYM,KAAMW,EAAMf,QAAS,CAC7BiC,KAAM,KACNC,KAAM,WALA,cASXzB,GAAuB,SAACX,EAAD,GAAkF,IAAtDE,EAAqD,EAA9DsD,QACzC,OAAO,2BAAKxD,GAAZ,IAAmBE,QAAQ,eAAMA,QAVvB,cAYXW,GAAsB,SAACb,EAAD,GAAwE,IAArDwD,EAAoD,EAApDA,QACxC,OAAO,2BAAKxD,GAAZ,IAAmBI,OAAQoD,OAbjB,cAeX/C,GAAkB,SAACT,EAAD,GAAoE,IAAjDwD,EAAgD,EAAhDA,QACpC,OAAO,2BAAKxD,GAAZ,IAAmBQ,WAAYgD,OAhBrB,GAoBDvD,EAAKwD,YAA4BF,EA9BhB,CAC5BnD,OAAQ,GACRF,QAAS,CACPiC,KAAM,KACNC,KAAM,MAER9B,KAAM,KACNE,YAAY,ICTCkD,EALKC,0BAAkC,CACpD1D,KACA2D,OAAQC,YAAcR,K,0CCRXS,EACL,OAGKC,GACM,kBADNA,GAEU,sB,YCANC,I,YAqBAC,I,YAcAC,IAnCV,SAAUF,GAAV,sFAEc,OAFcR,EAA5B,EAA4BA,QAA5B,kBAEoBW,IAAOC,KAAK,CACjCC,KAAMN,GACNO,QAASR,EACTN,YALC,OAaH,OAXMe,EAFH,OAQGrE,EAAmB,CACvBiC,MAAc,OAARoC,QAAQ,IAARA,GAAA,UAAAA,EAAUf,eAAV,mBAAmBtD,eAAnB,eAA4BsE,QAAS,KAC3CpC,MAAc,OAARmC,QAAQ,IAARA,GAAA,UAAAA,EAAUf,eAAV,mBAAmBtD,eAAnB,eAA4BuE,UAAW,MAV5C,SAaGC,YAAIxD,EAAmBhB,IAb1B,OAcH,OAdG,UAcGwE,YAAItD,EAAkB,KAdzB,QAeH,OAfG,UAeGsD,YAAI5D,GAAc,IAfrB,0DAiBH6D,QAAQC,MAAR,iCAAwC,KAAEC,UAjBvC,uDAqBA,SAAUZ,GAAV,4EAEc,OAFaT,EAA3B,EAA2BA,QAA3B,kBAEoBW,IAAOC,KAAK,CACjCC,KAAMN,GACNO,QAASR,EACTN,YALC,OAQH,OANMe,EAFH,gBAQGG,YAAItD,EAAkBmD,EAASf,QAAQpD,SAR1C,uDAUHuE,QAAQC,MAAR,gCAAuC,KAAEC,UAVtC,sDAcA,SAAUX,KAAV,iEACL,OADK,SACCY,YAAI,CAACC,YAAUrE,EAAcsD,MAD9B,OAEL,OAFK,SAECc,YAAI,CAACC,YAAUnE,EAAaqD,MAF7B,wC,gBCtCGe,IAAV,SAAUA,KAAV,iEACE,OADF,SACQF,YAAI,CACRG,YAAKf,MAFT,wCAMec,UCAf,IAAME,GCAC,SAAwBC,GAC7B,IAAMC,EAAiBC,cACjBC,EAAmBC,YAAuBlC,GAG1C6B,EAAiCM,sBACrC9B,EACAyB,EACAM,8BAAoBC,0BAAgBN,EAAgBE,KAQtD,OALAF,EACGO,IAAIX,IACJY,YACAC,OAAM,SAACnD,GAAD,OAA6BiC,QAAQC,MAAM,aAAclC,MAE3DwC,EDhBKY,GAIdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUf,MAAOA,GAAjB,SACE,cAAC,IAAD,CAAiB7B,QAASA,EAA1B,SACE,cAACF,EAAD,UAIN+C,SAASC,eAAe,W","file":"static/js/main.6fab12bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iconClose.12207cd1.svg\";","export default __webpack_public_path__ + \"static/media/iconCloseRound.1c4d5cb3.svg\";","export default __webpack_public_path__ + \"static/media/iconCloudyDay.0059aebf.svg\";","import { createSelector } from 'reselect'\nimport { ApplicationState, GetWeatherSelectorResult, Weather } from '../../types'\n\n// Generic types order: <State, Selector1, Selector2, ..., CurrentSelector>\nexport const getWeather = createSelector<ApplicationState, Weather, GetWeatherSelectorResult>(\n  [(state: ApplicationState) => state.ui.weather],\n  weather => {\n    return {\n      ...weather,\n    }\n  }\n)\n\nexport const getCities = createSelector<ApplicationState, [], []>(\n  [(state: ApplicationState) => state.ui.cities],\n  cities => {\n    return cities\n  }\n)\n\nexport const getCity = createSelector<ApplicationState, string | null, string | null>(\n  [(state: ApplicationState) => state.ui.city],\n  city => {\n    return city\n  }\n)\n\nexport const getOpenSearch = createSelector<ApplicationState, boolean, boolean>(\n  [(state: ApplicationState) => state.ui.openSearch],\n  openSearch => {\n    return openSearch\n  }\n)\n","import { createAction } from 'redux-actions'\nimport { Weather } from '../../types'\n\nexport const SET_OPEN_SEARCH = 'SET_OPEN_SEARCH'\nexport const LOAD_WEATHER = 'LOAD_WEATHER'\nexport const LOAD_WEATHER_SUCCESS = 'LOAD_WEATHER_SUCCESS'\nexport const LOAD_CITIES = 'LOAD_CITIES'\nexport const LOAD_CITIES_SUCCESS = 'LOAD_CITIES_SUCCESS'\n\nexport const setOpenSearch = createAction(SET_OPEN_SEARCH, (openSearch: boolean) => (openSearch))\nexport const loadWeather = createAction(LOAD_WEATHER, (name: string) => (name))\nexport const loadWeatherSuccess = createAction(LOAD_WEATHER_SUCCESS, (weather: Weather) => weather)\nexport const loadCities = createAction(LOAD_CITIES, (city: string) => (city))\nexport const loadCitiesSuccess = createAction(LOAD_CITIES_SUCCESS, (cities: []) => cities)\n\nexport type setOpenSearchActionType = ReturnType<typeof setOpenSearch>\nexport type loadWeatherActionType = ReturnType<typeof loadWeather>\nexport type loadWeatherSuccessActionType = ReturnType<typeof loadWeatherSuccess>\nexport type loadCitiesActionType = ReturnType<typeof loadCities>\nexport type loadCitiesSuccessActionType = ReturnType<typeof loadCitiesSuccess>\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport classnames from 'classnames'\nimport '../styles/weather/all.scss'\nimport iconClose from '../assets/weather/iconClose.svg'\nimport iconCloseRound from '../assets/weather/iconCloseRound.svg'\nimport iconCloudyDay from '../assets/weather/iconCloudyDay.svg'\nimport { ApplicationState, GetWeatherSelectorResult, City } from '../types'\nimport { getWeather, getCities, getCity, getOpenSearch } from '../redux/selectors/ui'\nimport { loadCities, loadWeather, setOpenSearch } from '../redux/actions/ui'\n\nexport default function WeatherApp() {\n  const [search, setSearch] = React.useState('')\n\n  const dispatch = useDispatch()\n\n  const weather = useSelector<ApplicationState, GetWeatherSelectorResult>(getWeather)\n  const cities = useSelector<ApplicationState, City[]>(getCities)\n  const city = useSelector<ApplicationState, string | null>(getCity)\n  const openSearch = useSelector<ApplicationState, boolean>(getOpenSearch)\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter') {\n      dispatch(loadCities(search))\n    }\n  }\n\n  const handleClickCity = (name: string) => {\n    dispatch(loadWeather(name))\n    setSearch('')\n  }\n\n  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value !== search) setSearch(e.target.value)\n  }\n\n  const handleOpenSearch = () => dispatch(setOpenSearch(!openSearch))\n\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">\n        <button\n          className=\"app__btn-menu app__btn-menu--dotted\"\n          onClick={handleOpenSearch}\n        >\n          <span className=\"sr-only\">Open menu</span>\n        </button>\n      </header>\n      <main className=\"app__main\">\n        <section className=\"weather\">\n          <img className=\"weather__icon\" src={iconCloudyDay} alt=\"\" />\n          <strong className=\"weather__title\">Cloudy</strong>\n          {city && (<>\n            <span className=\"weather__location\">{city}</span>\n\n            <div className=\"weather__info\">\n              <div className=\"weather-info\">\n                {weather.temp && (<div className=\"weather-info__item\">\n                  <strong className=\"weather-info__title\">{weather.temp}°</strong>\n                  <span className=\"weather-info__desc\">Feels like</span>\n                </div>)}\n                {weather.wind && (<div className=\"weather-info__item\">\n                  <strong className=\"weather-info__title\">{weather.wind} km/h</strong>\n                  <span className=\"weather-info__desc\">Wind speed</span>\n                </div>)}\n              </div>\n            </div>\n          </>)}\n        </section>\n      </main>\n      <aside className={classnames({\n        'app__aside': true,\n        'app__aside--show': openSearch,\n      })}>\n        <section className=\"weather-search\">\n          <header className=\"weather-search__header\">\n            <strong className=\"weather-search__title\">Choose city</strong>\n            <button\n              className=\"app__btn-menu weather-search__btn-close\"\n              onClick={handleOpenSearch}\n            >\n              <img width={18} height={18} src={iconClose} alt=\"close\" />\n            </button>\n          </header>\n          <div className=\"weather-search-input\">\n            <input onChange={handleSearchInputChange} onKeyDown={handleKeyDown} value={search} className=\"weather-search-input__field\" placeholder=\"Search\" />\n            <button onClick={() => setSearch('')} className=\"app__btn-menu weather-search-input__btn-clear\">\n              <img width={14} height={14} src={iconCloseRound} alt=\"close\" />\n            </button>\n          </div>\n          <ul className=\"weather-search-suggestion\">\n            {cities.map((city: City) => (\n              <li onClick={() => {\n                handleClickCity(city?.name)\n              }} key={city?.id} className=\"weather-search-suggestion__item\">{city?.name}</li>\n            ))}\n          </ul>\n        </section>\n      </aside>\n    </div>\n  )\n}","import React from \"react\"\nimport { Route, Switch } from \"react-router-dom\"\nimport WeatherApp from \"./WeatherApp\"\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <WeatherApp />\n      </Route>\n    </Switch>\n  )\n}\n","import { createBrowserHistory } from 'history'\n\n// Create history singleton\nconst history = createBrowserHistory()\n\nexport default history\n","import { handleActions } from 'redux-actions'\nimport { UiState } from '../../types'\nimport {\n  LOAD_WEATHER,\n  LOAD_WEATHER_SUCCESS,\n  loadWeatherSuccessActionType,\n  loadWeatherActionType,\n  loadCitiesSuccessActionType,\n  LOAD_CITIES_SUCCESS,\n  SET_OPEN_SEARCH,\n  setOpenSearchActionType,\n} from '../actions/ui'\n\nconst initialState: UiState = {\n  cities: [],\n  weather: {\n    temp: null,\n    wind: null,\n  },\n  city: null,\n  openSearch: false,\n}\n\nconst reducers = {\n  [LOAD_WEATHER]: (state: UiState, { payload: name }: loadWeatherActionType): UiState => {\n    return {\n      ...state, city: name, weather: {\n        temp: null,\n        wind: null,\n      },\n    }\n  },\n  [LOAD_WEATHER_SUCCESS]: (state: UiState, { payload: weather }: loadWeatherSuccessActionType): UiState => {\n    return { ...state, weather: { ...weather } }\n  },\n  [LOAD_CITIES_SUCCESS]: (state: UiState, { payload }: loadCitiesSuccessActionType): UiState => {\n    return { ...state, cities: payload }\n  },\n  [SET_OPEN_SEARCH]: (state: UiState, { payload }: setOpenSearchActionType): UiState => {\n    return { ...state, openSearch: payload }\n  },\n}\n\nexport const ui = handleActions<UiState, any>(reducers, initialState)\n","import { connectRouter } from 'connected-react-router'\nimport { combineReducers } from 'redux'\nimport history from '../router'\nimport { ui } from './ui'\nimport { ApplicationState } from '../../types'\n\nconst rootReducer = combineReducers<ApplicationState>({\n  ui,\n  router: connectRouter(history),\n})\n\nexport default rootReducer\n","export const HANDLER = {\n  BOTX: 'botx',\n  EXPRESS: 'express',\n}\nexport const TYPES = {\n  CURRENT_WEATHER: 'current_weather',\n  CITIES_AUTOCOMPLETE: 'cities_autocomplete',\n}","import { takeEvery, all, put } from 'redux-saga/effects'\nimport bridge from 'smartapp-bridge/build/main/index'\nimport { Weather } from '../../types'\nimport { HANDLER, TYPES } from '../../constants'\nimport { loadWeatherActionType, loadWeatherSuccess, LOAD_WEATHER, loadCitiesSuccess, loadCitiesActionType, LOAD_CITIES, setOpenSearch } from '../actions/ui'\n\nexport function* loadWeatherSaga({ payload }: loadWeatherActionType) {\n  try {\n    const response = yield bridge.send({\n      type: TYPES.CURRENT_WEATHER,\n      handler: HANDLER.BOTX,\n      payload,\n    })\n\n    const weather: Weather = {\n      temp: response?.payload?.weather?.tempC || null,\n      wind: response?.payload?.weather?.windKph || null,\n    }\n\n    yield put(loadWeatherSuccess(weather))\n    yield put(loadCitiesSuccess([]))\n    yield put(setOpenSearch(false))\n  } catch (e) {\n    console.error(`loadWeatherSaga error: ${e.message}`)\n  }\n}\n\nexport function* loadCitiesSaga({ payload }: loadCitiesActionType) {\n  try {\n    const response = yield bridge.send({\n      type: TYPES.CITIES_AUTOCOMPLETE,\n      handler: HANDLER.BOTX,\n      payload,\n    })\n\n    yield put(loadCitiesSuccess(response.payload.cities))\n  } catch (e) {\n    console.error(`loadCitiesSaga error: ${e.message}`)\n  }\n}\n\nexport function* rootUiSaga() {\n  yield all([takeEvery(LOAD_WEATHER, loadWeatherSaga)])\n  yield all([takeEvery(LOAD_CITIES, loadCitiesSaga)])\n}\n","import { all, fork } from 'redux-saga/effects'\nimport { rootUiSaga } from './ui'\n\nfunction* rootSaga() {\n  yield all([\n    fork(rootUiSaga),\n  ])\n}\n\nexport default rootSaga\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport './styles/index.scss'\nimport App from './components/App'\nimport { configureStore } from './redux/configureStore'\nimport history from './redux/router'\n\nconst store = configureStore()\n\nif (module.hot) module.hot.accept()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","import { applyMiddleware, createStore, Store, AnyAction } from 'redux'\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\nimport history from './router'\nimport { ApplicationState } from '../types'\n\nexport function configureStore(initialState?: ApplicationState): Store<ApplicationState> {\n  const sagaMiddleware = createSagaMiddleware()\n  const routerMiddleware = createRouterMiddleware(history)\n\n  // create store\n  const store: Store<ApplicationState> = createStore<ApplicationState, AnyAction, any, any>(\n    rootReducer,\n    initialState, // TODO: assign default value\n    composeWithDevTools(applyMiddleware(sagaMiddleware, routerMiddleware))\n  )\n\n  sagaMiddleware\n    .run(rootSaga)\n    .toPromise()\n    .catch((e: ExceptionInformation) => console.error('Saga error', e))\n\n  return store\n}\n"],"sourceRoot":""}